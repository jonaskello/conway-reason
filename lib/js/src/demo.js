// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var List     = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");

console.log("Hello, BuckleScript and Reason!");

var a = "hej";

console.log("sdfasdfhej");

var cells = /* :: */[
  /* :: */[
    /* true */1,
    /* :: */[
      /* false */0,
      /* :: */[
        /* true */1,
        /* :: */[
          /* false */0,
          /* [] */0
        ]
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      /* false */0,
      /* :: */[
        /* true */1,
        /* :: */[
          /* true */1,
          /* :: */[
            /* true */1,
            /* [] */0
          ]
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        /* true */1,
        /* :: */[
          /* false */0,
          /* :: */[
            /* true */1,
            /* :: */[
              /* false */0,
              /* [] */0
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* false */0,
          /* :: */[
            /* true */1,
            /* :: */[
              /* false */0,
              /* :: */[
                /* true */1,
                /* [] */0
              ]
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ]
];

function olle(cells, x, y) {
  return List.nth(List.nth(cells, x), y);
}

function printCell(cell) {
  if (cell) {
    return "X";
  } else {
    return " ";
  }
}

function printRow(row) {
  return $$String.concat("", List.map(printCell, row));
}

function printBoard(board) {
  return $$String.concat("\n", List.map(printRow, board));
}

function getCell(board, x, y) {
  if (x < 0 || x >= List.length(List.nth(board, 0)) || y < 0 || y >= List.length(board)) {
    return /* false */0;
  } else {
    return List.nth(List.nth(cells, y), x);
  }
}

function countLivingNeighbors(board, x, y) {
  var topLeft = getCell(board, x - 1 | 0, y - 1 | 0);
  var topMid = getCell(board, x, y - 1 | 0);
  var topRight = getCell(board, x + 1 | 0, y - 1 | 0);
  var midLeft = getCell(board, x - 1 | 0, y);
  var midRight = getCell(board, x + 1 | 0, y);
  var bottomLeft = getCell(board, x - 1 | 0, y + 1 | 0);
  var bottomMid = getCell(board, x, y + 1 | 0);
  var bottomRight = getCell(board, x + 1 | 0, y + 1 | 0);
  var neighbors_001 = /* :: */[
    topMid,
    /* :: */[
      topRight,
      /* :: */[
        midLeft,
        /* :: */[
          midRight,
          /* :: */[
            bottomLeft,
            /* :: */[
              bottomMid,
              /* :: */[
                bottomRight,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var neighbors = /* :: */[
    topLeft,
    neighbors_001
  ];
  return List.length(List.filter((function (c) {
                      return c;
                    }))(neighbors));
}

function shouldLive(board, y, x, isAlive) {
  var livingNeighbors = countLivingNeighbors(board, x, y);
  if (isAlive) {
    if (livingNeighbors >= 2 && livingNeighbors < 4) {
      return /* true */1;
    } else {
      return /* false */0;
    }
  } else {
    return +(livingNeighbors === 3);
  }
}

function stepRow(board, y, row) {
  return List.mapi((function (param, param$1) {
                return shouldLive(board, y, param, param$1);
              }), row);
}

function step(board) {
  return List.mapi((function (param, param$1) {
                return stepRow(board, param, param$1);
              }), board);
}

console.log(printBoard(cells));

var steppedBoard = List.mapi((function (param, param$1) {
        return stepRow(cells, param, param$1);
      }), cells);

console.log("stepping...");

console.log(printBoard(steppedBoard));

console.log("stepping...");

console.log(printBoard(steppedBoard));

console.log("stepping...");

var steppedBoard2 = List.mapi((function (param, param$1) {
        return stepRow(cells, param, param$1);
      }), cells);

console.log(printBoard(steppedBoard2));

exports.a                    = a;
exports.cells                = cells;
exports.olle                 = olle;
exports.printCell            = printCell;
exports.printRow             = printRow;
exports.printBoard           = printBoard;
exports.getCell              = getCell;
exports.countLivingNeighbors = countLivingNeighbors;
exports.shouldLive           = shouldLive;
exports.stepRow              = stepRow;
exports.step                 = step;
exports.steppedBoard         = steppedBoard;
exports.steppedBoard2        = steppedBoard2;
/*  Not a pure module */
